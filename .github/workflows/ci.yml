name: Continuous Integration

on:
  push:
    branches: [ main, master, release, develop ]
  pull_request:
    branches: [ main, master, release, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Primary testing on Ubuntu with multiple Node versions
          - os: ubuntu-latest
            node-version: 18
          - os: ubuntu-latest  
            node-version: 20
          # Cross-platform smoke tests on latest Node only
          - os: windows-latest
            node-version: 20
          - os: macos-latest
            node-version: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build project
        run: npm run build

      - name: Run basic tests
        run: npm run test:basic

      - name: Run alias tests  
        run: npm run test:aliases

      - name: Run all tests with coverage
        if: runner.os == 'Linux'
        run: npm run test:coverage
        timeout-minutes: 15

      - name: Test CLI commands and aliases (Unix)
        if: runner.os != 'Windows'
        run: |
          # Test basic commands
          node dist/index.js --help
          node dist/index.js --version
          node dist/index.js list
          
          # Test all aliases error handling
          node dist/index.js add 2>&1 | grep -q "Missing required arguments" || exit 1
          node dist/index.js a 2>&1 | grep -q "Missing required arguments" || exit 1
          node dist/index.js u 2>&1 | grep -q "Missing required arguments" || exit 1
          node dist/index.js r 2>&1 | grep -q "Missing required arguments" || exit 1
          node dist/index.js s 2>&1 | grep -q "Missing required arguments" || exit 1
          
          # Test list aliases work identically
          node dist/index.js list > /tmp/list1.txt
          node dist/index.js l > /tmp/list2.txt
          diff /tmp/list1.txt /tmp/list2.txt || exit 1
          
          echo "âœ… All alias tests passed on Unix"

      - name: Test CLI commands and aliases (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Test basic commands that should succeed
          node dist/index.js --help
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          node dist/index.js --version  
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          node dist/index.js list
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          # Test that commands with missing args show proper error messages and exit 1
          Write-Host "Testing add command error handling..."
          $addOutput = node dist/index.js add 2>&1
          if ($LASTEXITCODE -ne 1) { 
            Write-Host "ERROR: add command should exit with status 1, got $LASTEXITCODE"
            Write-Host "Output: $addOutput"
            exit 1 
          }
          # Convert to string and check for error text
          $outputString = $addOutput -join "`n"
          if ($outputString -notmatch "Missing required arguments") {
            Write-Host "ERROR: add command should show 'Missing required arguments'"
            Write-Host "Looking for: 'Missing required arguments'"
            Write-Host "Full output string:"
            Write-Host "'$outputString'"
            Write-Host "Contains 'Error': $($outputString -match 'Error')"
            Write-Host "Contains 'Missing': $($outputString -match 'Missing')"
            exit 1
          }
          
          Write-Host "Testing 'a' alias error handling..."
          $aOutput = node dist/index.js a 2>&1
          if ($LASTEXITCODE -ne 1) {
            Write-Host "ERROR: 'a' alias should exit with status 1, got $LASTEXITCODE"
            exit 1
          }
          if (($aOutput -join "`n") -notmatch "Missing required arguments") {
            Write-Host "ERROR: 'a' alias should show 'Missing required arguments'"  
            Write-Host "Output: $($aOutput -join "`n")"
            exit 1
          }
          
          Write-Host "Testing 'u' alias error handling..."
          $uOutput = node dist/index.js u 2>&1
          if ($LASTEXITCODE -ne 1) {
            Write-Host "ERROR: 'u' alias should exit with status 1, got $LASTEXITCODE"
            Write-Host "Output: $uOutput"
            exit 1
          }
          if (($uOutput -join "`n") -notmatch "Missing required arguments") {
            Write-Host "ERROR: 'u' alias should show 'Missing required arguments'"
            Write-Host "Output: $($uOutput -join "`n")"
            exit 1
          }
          
          Write-Host "Testing 'r' alias error handling..."
          $rOutput = node dist/index.js r 2>&1
          if ($LASTEXITCODE -ne 1) {
            Write-Host "ERROR: 'r' alias should exit with status 1, got $LASTEXITCODE"
            Write-Host "Output: $rOutput"
            exit 1
          }
          if (($rOutput -join "`n") -notmatch "Missing required arguments") {
            Write-Host "ERROR: 'r' alias should show 'Missing required arguments'"
            Write-Host "Output: $($rOutput -join "`n")"
            exit 1
          }
          
          Write-Host "Testing 's' alias error handling..."
          $sOutput = node dist/index.js s 2>&1
          if ($LASTEXITCODE -ne 1) {
            Write-Host "ERROR: 's' alias should exit with status 1, got $LASTEXITCODE"
            Write-Host "Output: $sOutput"
            exit 1
          }
          if (($sOutput -join "`n") -notmatch "Missing required arguments") {
            Write-Host "ERROR: 's' alias should show 'Missing required arguments'"
            Write-Host "Output: $($sOutput -join "`n")"
            exit 1
          }
          
          Write-Host "âœ… All alias tests passed on Windows"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Test CLI installation globally
      run: |
        npm pack
        npm install -g ./scaffold-scripts-*.tgz
        
    - name: Test global commands and aliases
      run: |
        # Test that both main commands work globally
        scripts --version
        scaffold --version
        
        # Test error handling with global install
        scripts add 2>&1 | grep -q "Missing required arguments" || exit 1
        scripts a 2>&1 | grep -q "Missing required arguments" || exit 1
        scripts u 2>&1 | grep -q "Missing required arguments" || exit 1
        scripts r 2>&1 | grep -q "Missing required arguments" || exit 1
        scripts s 2>&1 | grep -q "Missing required arguments" || exit 1
        
        # Test list commands work
        scripts list
        scripts l
        
        echo "âœ… All global alias tests passed"
        
    - name: Test complete alias workflow
      run: |
        # Create a test script
        echo '#!/bin/bash' > test-ci-script.sh
        echo 'echo "Hello from CI test"' >> test-ci-script.sh
        
        # Test complete workflow using only aliases
        scripts a ci-test ./test-ci-script.sh
        scripts l | grep -q "ci-test" || exit 1
        scripts s ci-test | grep -q "Command Details" || exit 1
        scripts r ci-test
        
        # Verify cleanup
        ! scripts l | grep -q "ci-test" || exit 1
        
        echo "âœ… Complete alias workflow test passed"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: npm audit --audit-level=high --production

  pre-release-check:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release' || contains(github.ref, 'release')
    needs: [test, integration-test, security-audit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Validate package.json
      run: |
        # Check that version is properly set
        node -e "const pkg = require('./package.json'); if (!pkg.version.match(/^\d+\.\d+\.\d+$/)) process.exit(1);"
        
        # Check that all required fields are present
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main', 'bin', 'scripts'];
          for (const field of required) {
            if (!pkg[field]) {
              console.error('Missing required field:', field);
              process.exit(1);
            }
          }
        "
        
    - name: Test package creation
      run: |
        npm pack
        tar -tzf scaffold-scripts-*.tgz | head -20
        
    - name: Run extended alias tests for release
      run: |
        # Run alias tests multiple times to catch any intermittent issues
        for i in {1..3}; do
          echo "ðŸ”„ Running alias test iteration $i"
          npm test -- tests/aliases.test.ts
        done
        
        echo "âœ… Extended alias tests passed for release"
        
    - name: Generate release validation report
      run: |
        echo "# Release Validation Report" > release-validation.md
        echo "## Test Results" >> release-validation.md
        echo "- âœ… Unit tests passed" >> release-validation.md
        echo "- âœ… Integration tests passed" >> release-validation.md
        echo "- âœ… Security audit passed" >> release-validation.md
        echo "- âœ… Alias tests passed" >> release-validation.md
        echo "- âœ… Package validation passed" >> release-validation.md
        echo "## Build Info" >> release-validation.md
        echo "- Node version: $(node --version)" >> release-validation.md
        echo "- NPM version: $(npm --version)" >> release-validation.md
        echo "- Commit: ${{ github.sha }}" >> release-validation.md
        echo "- Branch: ${{ github.ref_name }}" >> release-validation.md
        echo "- Date: $(date -u)" >> release-validation.md
        
    - name: Upload release validation report
      uses: actions/upload-artifact@v3
      with:
        name: release-validation-report
        path: release-validation.md
        retention-days: 30