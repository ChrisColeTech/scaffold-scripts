name: Develop to Release
on:
  push:
    branches: [develop]

jobs:
  auto-merge-and-validate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout develop branch
      uses: actions/checkout@v4
      with:
        ref: develop
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Auto-merge from release branch
      id: merge-status
      run: |
        echo "üîÑ Fetching latest release branch..."
        git fetch origin release
        
        echo "üîç Checking if develop is behind release..."
        BEHIND_COUNT=$(git rev-list --count HEAD..origin/release)
        echo "behind_count=$BEHIND_COUNT" >> $GITHUB_OUTPUT
        
        if [ $BEHIND_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Develop is $BEHIND_COUNT commits behind release, attempting auto-merge..."
          
          # Try to merge
          if git merge origin/release --no-edit; then
            echo "‚úÖ Auto-merge successful"
            git push origin develop
            echo "merge_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Auto-merge failed - conflicts detected"
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚úÖ Develop branch is up to date with release"
          echo "merge_status=up_to_date" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
    
    - name: Install dependencies
      run: |
        cd app
        npm ci
    
    - name: Run full precommit validation
      run: |
        cd app
        echo "üß™ Running comprehensive validation..."
        npm run precommit
        echo "‚úÖ All validation checks passed!"
    
    - name: Check if PR already exists
      id: check-pr
      run: |
        PR_EXISTS=$(gh pr list --head develop --base release --json number --jq length)
        echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create or update PR to release
      if: steps.check-pr.outputs.pr_exists == '0'
      run: |
        # Generate commit summary (limit to 5 most recent, with total count)
        COMMIT_COUNT=$(git log --oneline origin/release..HEAD | wc -l)
        COMMIT_SUMMARY=$(git log --oneline origin/release..HEAD | head -5)
        
        # Generate change summary by category
        FEATURES=$(git log --oneline origin/release..HEAD --grep="feat\|add\|new" | head -3)
        FIXES=$(git log --oneline origin/release..HEAD --grep="fix\|bug" | head -3)
        IMPROVEMENTS=$(git log --oneline origin/release..HEAD --grep="improve\|update\|enhance" | head -3)
        
        # Check merge status for PR description
        MERGE_STATUS_TEXT=""
        if [ "${{ steps.merge-status.outputs.merge_status }}" = "success" ]; then
          MERGE_STATUS_TEXT="- [x] Auto-merged from release branch ‚úÖ"
        elif [ "${{ steps.merge-status.outputs.merge_status }}" = "conflict" ]; then
          MERGE_STATUS_TEXT="- [x] ‚ö†Ô∏è **Merge conflicts detected** - Manual merge required"
        else
          MERGE_STATUS_TEXT="- [x] Up to date with release branch ‚úÖ"
        fi
        
        # Create PR with validation status
        gh pr create --base release --head develop \
          --title "üöÄ Release Candidate: $(date '+%Y-%m-%d') - $COMMIT_COUNT commits" \
          --body "## üéØ Validation Status
        
        ‚úÖ **Automated Checks Completed**
        $MERGE_STATUS_TEXT
        - [x] Build successful (\`npm run build\`)
        - [x] All tests passed (\`npm run test:ci\`)
        - [x] Linting clean (\`npm run lint\`)
        - [x] Type checking passed (\`npm run typecheck\`)
        - [x] Dependencies installed
        - [x] Security audit completed
        
        ‚è≥ **Manual Review Required**
        - [ ] Code review completed
        - [ ] Feature testing done
        - [ ] Documentation updated
        - [ ] Ready for release
        
        ## üìä Change Summary ($COMMIT_COUNT commits)
        
        ### üÜï New Features
        \`\`\`
        ${FEATURES:-"No new features"}
        \`\`\`
        
        ### üêõ Bug Fixes
        \`\`\`
        ${FIXES:-"No bug fixes"}
        \`\`\`
        
        ### ‚ö° Improvements
        \`\`\`
        ${IMPROVEMENTS:-"No improvements"}
        \`\`\`
        
        ### üìù Recent Commits (last 5)
        \`\`\`
        $COMMIT_SUMMARY
        \`\`\`
        
        $(if [ $COMMIT_COUNT -gt 5 ]; then echo "... and $(($COMMIT_COUNT - 5)) more commits"; fi)
        
        ## üîß Next Steps
        1. Review the code changes
        2. Test the new features
        3. Approve and merge when ready
        4. CI will automatically publish to NPM and create GitHub release
        
        ---
        *This PR was automatically created and validated by GitHub Actions*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update existing PR
      if: steps.check-pr.outputs.pr_exists != '0'
      run: |
        echo "üìù Updating existing PR with latest validation status..."
        gh pr edit develop --body "## üéØ Validation Status - Updated $(date '+%Y-%m-%d %H:%M')
        
        ‚úÖ **Automated Checks Completed**
        - [x] Auto-merged from release branch
        - [x] Build successful
        - [x] All tests passed
        - [x] Linting clean
        - [x] Type checking passed
        - [x] Latest changes validated
        
        ‚è≥ **Manual Review Required**
        - [ ] Code review completed
        - [ ] Ready for release
        
        ---
        *Validation completed automatically by GitHub Actions*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}